# Trigger the workflow to deploy a specific git reference to a specific environment only when:
# - the `workflow_dispatch` event is used in the UI.
# This is ideal for environment such as production, staging or sandbox if you wish to make the
# deployment manual.
  
name: Manual deployment
  
on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to deploy - options: qa|stage|prod"
        required: true
      ref:
        description: "Git reference to deploy - example: branch/tag/sha"
        required: true
  
jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      repo: ${{ steps.vars.outputs.repo }}
      commit: ${{ steps.vars.outputs.commit }}
    steps:
      - name: Deployment info
        run: echo "Deploying '${{ github.event.inputs.ref }}' to '${{ github.event.inputs.env }}' environment"
      - name: Verifying environment
        run: |
          envs=("qa stage prod")
          [[ ${envs[*]} =~ ${{ github.event.inputs.env }} ]] || { echo "Invalid environment"; exit 1; }
      - name: Use repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.ref }}
      - name: Build variables
        id: vars
        run: |
          echo "::set-output name=repo::$GITHUB_REPOSITORY"
          echo "::set-output name=commit::$(git rev-parse --short "$GITHUB_SHA")"
      - name: Upload repository
        uses: actions/upload-artifact@v2
        with:
          name: repository
          path: |
            ${{ github.workspace }}/deploy
            ${{ github.workspace }}/docker
            ${{ github.workspace }}/.dockerignore
            ${{ github.workspace }}/main.go
            ${{ github.workspace }}/main_test.go
            ${{ github.workspace }}/go.mod
            ${{ github.workspace }}/go.sum

  deploy:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Download repository
        uses: actions/download-artifact@v2
        with:
          name: repository
      - name: Install kubectl
        run: |
          curl -LO https://dl.k8s.io/release/v1.28.3/bin/linux/amd64/kubectl
          curl -LO "https://dl.k8s.io/v1.28.3/bin/linux/amd64/kubectl.sha256"
          echo "$(<kubectl.sha256) kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
      - name: Create kube config
        run: |
          mkdir -p $HOME/.kube/
          case ${{ github.event.inputs.env }} in
                qa) echo "${{ secrets.CLUSTER_QA_CONFIG }}" > $HOME/.kube/config ;;
            stage) echo "${{ secrets.CLUSTER_STAGE_CONFIG }}" > $HOME/.kube/config ;;
              prod) echo "${{ secrets.CLUSTER_PROD_CONFIG }}" > $HOME/.kube/config ;;
                *) echo "Invalid environment"; exit 1;;
          esac
          case ${{ github.event.inputs.env }} in
                qa) echo "${{ secrets.CLUSTER_QA_CLIENT_CERT }}" > $HOME/.kube/client.crt ;;
            stage) echo "${{ secrets.CLUSTER_STAGE_CLIENT_CERT }}" > $HOME/.kube/client.crt ;;
              prod) echo "${{ secrets.CLUSTER_PROD_CLIENT_CERT }}" > $HOME/.kube/client.crt ;;
                *) echo "Invalid environment"; exit 1;;
          esac
          case ${{ github.event.inputs.env }} in
                qa) echo "${{ secrets.CLUSTER_QA_CLIENT_KEY }}" > $HOME/.kube/client.key ;;
            stage) echo "${{ secrets.CLUSTER_STAGE_CLIENT_KEY }}" > $HOME/.kube/client.key ;;
              prod) echo "${{ secrets.CLUSTER_PROD_CLIENT_KEY }}" > $HOME/.kube/client.key ;;
                *) echo "Invalid environment"; exit 1;;
          esac
          case ${{ github.event.inputs.env }} in
                qa) echo "${{ secrets.CLUSTER_QA_ENV }}" > $HOME/.kube/qa.properties ;;
            stage) echo "${{ secrets.CLUSTER_STAGE_ENV }}" > $HOME/.kube/stage.properties ;;
              prod) echo "${{ secrets.CLUSTER_PROD_ENV }}" > $HOME/.kube/prod.properties ;;
                *) echo "Invalid config"; exit 1;;
          esac
          case ${{ github.event.inputs.env }} in
                qa) echo "${{ secrets.CLUSTER_QA_TLS_KEY }}" > $HOME/.kube/tls_ca.key ;;
            stage) echo "${{ secrets.CLUSTER_STAGE_TLS_KEY }}" > $HOME/.kube/tls_ca.key ;;
              prod) echo "${{ secrets.CLUSTER_PROD_TLS_KEY }}" > $HOME/.kube/tls_ca.key ;;
                *) echo "Invalid config"; exit 1;;
          esac
          case ${{ github.event.inputs.env }} in
                qa) echo "${{ secrets.CLUSTER_QA_TLS_CERT }}" > $HOME/.kube/tls_ca.crt ;;
            stage) echo "${{ secrets.CLUSTER_STAGE_TLS_CERT  }}" > $HOME/.kube/tls_ca.crt ;;
              prod) echo "${{ secrets.CLUSTER_PROD_TLS_CERT  }}" > $HOME/.kube/tls_ca.crt ;;
                *) echo "Invalid config"; exit 1;;
          esac
      - name: Deploy
        run: |
          kubectl --kubeconfig $HOME/.kube/config delete secret -n ${{ github.event.inputs.env }} gf-config-secret
          kubectl --kubeconfig $HOME/.kube/config create secret generic -n ${{ github.event.inputs.env }} gf-config-secret --from-env-file=$HOME/.kube/${{ github.event.inputs.env }}.properties
          kubectl --kubeconfig $HOME/.kube/config delete secret -n ${{ github.event.inputs.env }} tls-secret
          kubectl --kubeconfig $HOME/.kube/config create secret tls -n ${{ github.event.inputs.env }} tls-secret --key $HOME/.kube/tls_ca.key --cert $HOME/.kube/tls_ca.crt
          kubectl --kubeconfig $HOME/.kube/config delete secret -n ${{ github.event.inputs.env }} gf-config-cookie
          kubectl --kubeconfig $HOME/.kube/config create secret generic -n ${{ github.event.inputs.env }} gf-config-cookie --from-literal=erlangCookie=$(dd if=/dev/urandom bs=30 count=1 | base64)
          kubectl --kubeconfig $HOME/.kube/config apply -k deploy/k8s/${{ github.event.inputs.env }}